--------------------------------------------------------------------ASSEMBLER---------------------------------------------------------

Project Contributors :
			VAIBHAV SONI	2019454
			SRIJAN GARG	2019448
			NAMAN GUPTA	2019436
			
			
Assembler is a computer program that converts assembly language code into object code.This is an implementation of a two-pass assembler.

---------------------------------------------------------------------WORKFLOW--------------------------------------------------------

Two classes are made for each of the passes, Pass_one and Pass_two.
A function named pass_one is made to invoke pass one of assembler which in turn invokes pass two of assembler.

1) Assembler first initialises the following
	* opcode_table (opcodes were already provided)(implemented using dictionary)
	* literal_table	(empty)(implented using dictionary)
	* symbol_table (empty)(implemented using dictionary)
	
	
2) Input file path is required.

3) First Pass class is called, to check for all Errors and formatting of instruction strings to actual usable data to write machine code.
	* First pass checks for all possible errors (listed below) and eliminate them/notify the user regarding the same.
	* First pass generates symbol_table, which has references to all the symbols and their address in virtual memory.
	* First pass generates literal_table, which has refernces to all literals and their address in virtual memory.
	* First pass writes all instructions, ignoring the comments, in a text file temp.txt(later to be used by pass two).
	* Errors are written in file error.txt .

5) Newly generated Symbol and Literal Table are printed on the terminal, after the first pass.

6) Second Pass is called to use these Symbol and Literal Tables, and generate the corresponding Object Code file.
	*Second pass genrates a string output corresponding to each line of instruction and writes it in output.txt .
	*Second pass generates the final output file output.txt .

7) The symbol_table, literal_table and errors(if any) are printed and output is generated in output.txt if there exists no fatal error.

Comments are declared by using // sign before comments. Anything after // in a given line is ignored.
Labels are declared in the format <ADD LABEL NAME>: . if ':' is not used immediately after label(without space), it may cause fatal error!!!

----------------------------------------------------------------Error - Reporting-----------------------------------------------------

The following are the errors that an assembler can encounter :
    1. A symbol has been used but not defined
    2. A symbol has been defined more than once(fatal error)
    3. The name in the opcode field is not a legal opcode
    4. An opcode is not supplied  with enough operands
    5. An opcode is supplied  with too many operands 
    6. The STP statement is missing
    7. Out of bounds error, i.e, not enough memory
    8. Variable and label having same name
 
If for any fatal error, object code is not generated, message "fatal error,no output generated" is written in the file error.txt. in this case output file will be empty file.

The Possible Errors mentioned above have been handled in the following way in our Assembler respectively :

    1.The message "symbol <symbol_name> used but not defined" is written in file error.txt, but the object code is still generated by assigning         the symbol an arbitrary address.

    2.The message "Symbol <symbol_name> declared multiple times" is written in file error.txt. In this case object code is not generated.

    3.The message "<opcode> is an invalid opcode" is written in file error.txt .The object code is generated by ignoring the line containing            invalid opcode.

    4.The message "Not enough operands supplied" is written in file error.txt .The object code is generated by ignoring the line containing             such error.

    5.The message "Extra operands supplied" is written in file error.txt .The object code is generated by ignoring the line containing the             such error.

    6.The message "Stop no found in the program" is written in file error.txt. The object code is still generated in this
      case by adding stop at the end of the program.
    
    7. The message "Implicit address used is out of bounds for memory" is written in file error.txt. In this case object code is not generated.
    8. The message "label and variable with the same name" is written in file error.txt. the object code is not generated in this case.

****************************************Instructions to run**************************************************************
AFTER EXTRACTING, RUN THE FOLLOWING ON THE TERMINAL IN THE DIRECTORY CONTAINING MAIN.py:
python MAIN.py
follow the instruction on the terminal
